/** Represents a linked list of integers. */
class List {
    field int x;          // a list consists of a x field,
    field int y;            // a list consists of a y field,
    field List next;         // followed by a list

    /* Creates a List. */
    constructor List new(int Ax, int Ay, List cdr ) {
        let x = Ax;       // the identifiers Ax and cdr are used in 
        let y = Ay;         // the identifiers Ay and cdr are used in 
        let next = cdr;       // memory of the Lisp programming language
        return this;
    }

    /** Accessors. */
    method int getX() { return x; }
    method int getY() { return y; }
    method int getNext() { return next; }
    /** Setter */
    method void setNext(List nextA) {
        let next = nextA;
        return;
    }

    /** Prints this list. */
    method void print() {
        var List current;    // initializes current to the first item
        let current = this;  // of this list
        while (~(current = null)) {
            do Output.printChar("X");
            do Output.printInt(current.getX());
            do Output.printChar("Y");
            do Output.printInt(current.getY());
            do Output.printChar(32); // prints a space
            let current = current.getNext();
        }
        return;
    }
    /** Disposes this List by recursively disposing its tail. */
    method void dispose() {
        if (~(next = null)) {
            do next.dispose();
        }
        // Uses an OS routine to recycle this object.
        do Memory.deAlloc(this);
        return;
    }
}

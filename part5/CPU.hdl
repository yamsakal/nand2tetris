// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    And(a=instruction[15], b=instruction[5], out=CandA);
    // Taking the input for A - from ALU / instruction
    Mux16(a=instruction, b=outALU, sel=CandA, out=A);
    Not(in=instruction[15], out=NotC);

    // Should write to A
    Or(a=NotC, b=CandA, out=ShouldA);

    // Writing / Reading - A
    ARegister(in=A, load=ShouldA, out=outA, out[0..14]=addressM);

    // Taking from A / inM determinated by the 12 bit
    Mux16(a=outA, b=inM, sel=instruction[12], out=muxAinM);

    // Should write to D - determent by the 15 + 4 bits
    And(a=instruction[15], b=instruction[4], out=ShouldD);

    // Reading / Writing to D
    DRegister(in=outALU, load=ShouldD, out=outD);
    
    // Calling the ALU with parameters decoded from the instrutions and saving the output both to outM and outALU
    ALU(x=outD, y=muxAinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);

    // Filling writeM by the 3 + 15 bits
    And(a=instruction[3], b=instruction[15], out=writeM);


    // Jump1 - 3 symbols jump conditions - determinated by the instruction
    And(a=instruction[2], b=ng, out=Jump1);
    And(a=instruction[1], b=zr, out=Jump2);
    Or(a=zr, b=ng, out=ZeroOrNegetive);
    Not(in=ZeroOrNegetive, out=Possitive);
    And(a=instruction[0], b=Possitive, out=Jump3);

    // If one of Jump condition applyed - setting ShouldJump to True
    Or(a=Jump1, b=Jump2, out=Jump12);
    Or(a=Jump12, b=Jump3, out=ShouldJump);

    // Jumping only if Should Jump and the 15'th bit is set
    And(a=ShouldJump, b=instruction[15], out=Jump);

    // Increasing only when not jumping
    Not(in=Jump, out=Increase);
    
    // Next comamnd by previous parameters
    PC(in=outA, load=Jump, inc=Increase, reset=reset, out[0..14]=pc);

}